Ajax(Asynchronous JavaScript And XML)
- 빠르게 동작하는 웹 페이지를 만들기 위한 개발기법
- 웹 페이지 전체를 다시 로딩하지 않고 웹 페이지의 일부분만을 갱신
- 백그라운드 영역에서 서버와 통신하여 그 결과를 웹페이지에 표시
- 서버와 데이터를 주고 받는 데이터는 HTML, XML, JSON, 텍스트등 ...

Ajax의 장점
- 웹페이지 전체를 다시 로딩하지 않고 웹페이지의 일부분만을 갱신
- 웹페이지가 로드된 후에 서버로 데이터를 요청을 보내거나 받을 수 있음
- 다양한 동적 페이지의 구현이 가능

Ajax의 단점
- 페이지의 이동이 없기 때문에 히스토리가 남지 않음
- 반복적인 데이터를 요청하게 되면 느려지거나 작동하지 않음
- 서버에서 클라이언트로 먼저 요청할 수 없음

XMLHttpRequest 객체
- Ajax의 가장 핵심적인 구성요소는 XMLHttpRequest 객체
- 웹 브라우저가 서버와 데이터를 교환할 때 사용
- 백그라운드에서 계속 서버와 통신할 수 있는 기능을 제공

	const 객체명 = new XMLHttpRequest();   //XHR;
	
open()
- 서버에 보낼 Ajax요청의 형식을 설정
	open(전달방식, URL주소, 동기여부);
	전달방식 : get, post 방식 중 하나를 선택
	URL주소 : 요청을 처리할 서버의 파일 주소
	동기여부 : 요청을 동기식으로 전달할지 비동기식으로 전달할지 선택(기본 : true, 비동기)

send()
- 작성된 Ajax 서버로 전달
- send() get방식, send("문자열") post 방식

readyState
- XMLHttpRequest 객체의 상태를 나타내는 프로퍼티
- 객체 생성시 : 0
- open() 메소드를 호출 : 1
- send() 메소드를 호출 : 2
- loading이 진행되면 : 3
- 완료(XMLHttpRequest.DONE)가 되면 : 4
- 프로퍼티의 값이 변경될 때마다 onreadystatechange() 함수를 호출(콜백)

status
- XMLHttpRequest 객체가 접속한 서버페이지의 상태
- 정상적인 호출: 200, 페이지가 없음 : 404


문제.
아이디 중복체크 기능을 추가

- 중복체크 버튼을 클릭하면 아이디 입력란에 입력한 값이 idcheck.jsp로 전달
(Ajax를 사용)
- idcheck.jsp 에서 전달받은 아이디를 tb_member 테이블에 데이터가 있는지 여부를 체크
- 데이터의 유무에 따라 회원가입 페이지쪽으로 결과를 리턴 (idcheckmsg에 출력)

과제.
로그인 구현
(깃허브에 제출)
	









